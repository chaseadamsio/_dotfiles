#+TITLE: ZSH

Install Antibody (package manager for ZSH):
#+begin_src shell :shebang #!/bin/zsh :tangle no
curl -sfL git.io/antibody | sh -s - -b /usr/local/bin
#+end_src

#+PROPERTY: header-args :tangle "~/.zshrc" 

I use [[http://zsh.sourceforge.net/][ZSH (z shell)]].
#+begin_src shell :shebang #!/bin/zsh
# THIS FILE IS AUTOMATICALLY GENERATED by dotfiles/zsh.org
#+end_src

#+begin_src shell 
  if [[ -a ~/.localrc ]]; then
      source ~/.localrc
  fi
#+end_src

#+begin_src shell 
HISTSIZE=10000
SAVEHIST=10000
#+end_src

#+begin_src shell 
export GOPATH=$HOME
export WRK_PATH="$GOPATH/src"
export GH_PATH="$WRK_PATH/github.com"
export GL_PATH="$WRK_PATH/gitlab.com"
export DOTFILES_PATH="$GH_PATH/chaseadamsio/dotfiles"
#+end_src

#+begin_src shell 
PATH=/usr/local/go/bin:$PATH
PATH=$GOPATH/bin:$PATH
PATH=/usr/local/sbin:$PATH
PATH=/usr/local/bin:$PATH
PATH=$DOTFILES_PATH/bin:$PATH
export PATH
#+end_src

#+begin_src shell 
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi
#+end_src

#+begin_src shell 
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
#+end_src

NVM:
#+begin_src shell 
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
#+end_src

Making GPG work for git commits:
#+begin_src shell 
GPG_TTY=$(tty)
export GPG_TTY
#+end_src

#+begin_src shell 
source <(antibody init)
#+end_src

#+begin_src shell 
setopt null_glob
#+end_src

* Aliases

#+begin_src shell 
alias re!="source ~/.zshrc"
#+end_src

#+begin_src shell 
alias l="ls -l"
#+end_src

#+begin_src shell 
alias ..="cd ../"
alias ...="cd ../../"
alias ....="cd ../../../"
alias .....="cd ../../../../"
#+end_src

#+begin_src shell 
alias l="ls -l ${colorflag}"
alias la="ls -la ${colorflag}"
alias lsd='ls -l ${colorflag} | grep "^d"'
alias ls="command ls ${colorflag}"
#+end_src

#+begin_src shell 
alias godot="cd $DOTFILES_PATH"
alias gogl="cd $GL_PATH"
alias gogh="cd $GH_PATH"
alias goglca="cd $GL_PATH/chaseadamsio"
alias goghca="cd $GH_PATH/chaseadamsio"
#+end_src

bind emacs to 24 bit TERM if available:
#+begin_src shell 
alias emacs="TERM=xterm-24bit emacs -nw"
#+end_src


* Functions

stop all running docker containers:
#+begin_src shell 
function dockerstopall (){
    docker stop $(docker ps -a -q);
}

#+end_src

 remove all running docker containers:
#+begin_src shell 
function dockerrmall () {
    docker rm $(docker ps -a -f status=exited -q);
}

#+end_src

nuke all running docker containers:
#+begin_src shell 
function dockernukeall () {
    dockerstopall && docker rm $(docker ps -a -q)
}

#+end_src

mkdir recursively and change into it when done:
#+begin_src shell 
function mkd () {
    mkdir -p "$@" && cd "$@"
}
#+end_src

* Antibody Plugins

#+begin_src shell 
antibody bundle mafredri/zsh-async
antibody bundle sindresorhus/pure
antibody bundle zsh-users/zsh-autosuggestions
antibody bundle zsh-users/zsh-syntax-highlighting
antibody bundle rupa/z
#+end_src
